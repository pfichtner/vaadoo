package com.example;

import jakarta.validation.constraints.AssertFalse;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Null;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Pattern.Flag;
import java.net.IDN;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public class SomeClass {
   private final Object someNullObject;
   private final Object someObject;
   private final String valueWithoutAnnotation;
   private final CharSequence someNotEmptyCharSequence;
   private final String someNotEmptyString;
   private final Collection someNotEmptyCollection;
   private final Map someNotEmptyMap;
   private final Integer[] someNotEmptyArray;
   private final CharSequence someNonBlankValue;
   private final String stringOfLenfthBetween10And20;
   private final String someNonBlankValueWithCustomMessage;
   private final String someFourDigits;
   private final String anyMailAddress;
   private final boolean someTrueValue;
   private final boolean someFalseValue;
   private final Boolean someTrueValueWrapper;
   private final Boolean someFalseValueWrapper;
   private final int someIntPrimitiveValueThatIsMinimal42;
   private final Long someLongWrapperValueThatIsMinimal42;
   private final Short someShortWrapperValueThatIsNotNullAndAbout42;

   public SomeClass(@Null Object someNullObject, @NotNull Object someObject, String valueWithoutAnnotation, @NotEmpty CharSequence someNotEmptyCharSequence, @NotEmpty String someNotEmptyString, @NotEmpty Collection someNotEmptyCollection, @NotEmpty Map someNotEmptyMap, Integer[] someNotEmptyArray, @NotBlank CharSequence someNonBlankValue, @NotBlank(message = "my custom message") String someNonBlankValueWithCustomMessage, @Size(min = 10,max = 20) String stringOfLenfthBetween10And20, @Pattern(regexp = "\\d{1,4}",flags = {Flag.CASE_INSENSITIVE, Flag.MULTILINE}) String someFourDigits, @Email String anyMailAddress, @AssertTrue boolean someTrueValue, @AssertFalse boolean someFalseValue, @AssertTrue Boolean someTrueValueWrapper, @AssertFalse Boolean someFalseValueWrapper, @Min(42L) int someIntPrimitiveValueThatIsMinimal42, @Min(42L) Long someLongWrapperValueThatIsMinimal42, @NotNull @Min(41L) @Max(43L) Short someShortWrapperValueThatIsNotNullAndAbout42) {
      validate(someNullObject, someObject, valueWithoutAnnotation, someNotEmptyCharSequence, someNotEmptyString, someNotEmptyCollection, someNotEmptyMap, someNotEmptyArray, someNonBlankValue, someNonBlankValueWithCustomMessage, stringOfLenfthBetween10And20, someFourDigits, anyMailAddress, someTrueValue, someFalseValue, someTrueValueWrapper, someFalseValueWrapper, someIntPrimitiveValueThatIsMinimal42, someLongWrapperValueThatIsMinimal42, someShortWrapperValueThatIsNotNullAndAbout42);
      super();
      this.someNullObject = someNullObject;
      this.someObject = someObject;
      this.valueWithoutAnnotation = valueWithoutAnnotation;
      this.someNotEmptyCharSequence = someNotEmptyCharSequence;
      this.someNotEmptyString = someNotEmptyString;
      this.someNotEmptyCollection = someNotEmptyCollection;
      this.someNotEmptyMap = someNotEmptyMap;
      this.someNotEmptyArray = someNotEmptyArray;
      this.someNonBlankValue = someNonBlankValue;
      this.stringOfLenfthBetween10And20 = stringOfLenfthBetween10And20;
      this.someNonBlankValueWithCustomMessage = someNonBlankValueWithCustomMessage;
      this.someFourDigits = someFourDigits;
      this.anyMailAddress = anyMailAddress;
      this.someTrueValue = someTrueValue;
      this.someFalseValue = someFalseValue;
      this.someTrueValueWrapper = someTrueValueWrapper;
      this.someFalseValueWrapper = someFalseValueWrapper;
      this.someIntPrimitiveValueThatIsMinimal42 = someIntPrimitiveValueThatIsMinimal42;
      this.someLongWrapperValueThatIsMinimal42 = someLongWrapperValueThatIsMinimal42;
      this.someShortWrapperValueThatIsNotNullAndAbout42 = someShortWrapperValueThatIsNotNullAndAbout42;
   }

   public static void main(String[] args) {
      System.out.println(new SomeClass((Object)null, "isNotNull", (String)null, (CharSequence)null, (String)null, List.of(), Map.of(), new Integer[0], "", "", "", "1234", "me@example.com", true, false, Boolean.TRUE, Boolean.FALSE, 42, 42L, Short.valueOf((short)42)));
   }

   private static void validate(Object var0, Object var1, String var2, CharSequence var3, String var4, Collection var5, Map var6, Integer[] var7, CharSequence var8, String var9, String var10, String var11, String var12, boolean var13, boolean var14, Boolean var15, Boolean var16, int var17, Long var18, Short var19) {
      if (var0 != null) {
         throw new IllegalArgumentException("someNullObject must be null");
      } else if (var1 == null) {
         throw new NullPointerException("someObject must not be null");
      } else if (var3 == null) {
         throw new NullPointerException("someNotEmptyCharSequence must not be empty");
      } else if (var3.length() <= 0) {
         throw new IllegalArgumentException("someNotEmptyCharSequence must not be empty");
      } else if (var4 == null) {
         throw new NullPointerException("someNotEmptyString must not be empty");
      } else if (var4.length() <= 0) {
         throw new IllegalArgumentException("someNotEmptyString must not be empty");
      } else if (var5 == null) {
         throw new NullPointerException("someNotEmptyCollection must not be empty");
      } else if (var5.size() <= 0) {
         throw new IllegalArgumentException("someNotEmptyCollection must not be empty");
      } else if (var6 == null) {
         throw new NullPointerException("someNotEmptyMap must not be empty");
      } else if (var6.size() <= 0) {
         throw new IllegalArgumentException("someNotEmptyMap must not be empty");
      } else if (var7 == null) {
         throw new NullPointerException("someNotEmptyArray must not be empty");
      } else if (var7.length <= 0) {
         throw new IllegalArgumentException("someNotEmptyArray must not be empty");
      } else if (var8 == null) {
         throw new NullPointerException("someNonBlankValue must not be blank");
      } else if (var8.toString().trim().length() <= 0) {
         throw new IllegalArgumentException("someNonBlankValue must not be blank");
      } else if (var9 == null) {
         throw new NullPointerException("my custom message");
      } else if (var9.toString().trim().length() <= 0) {
         throw new IllegalArgumentException("my custom message");
      } else if (var10 == null || var10.length() >= 10 && var10.length() <= 20) {
         int var21;
         if (var11 != null) {
            Flag[] var20 = new Flag[]{Flag.CASE_INSENSITIVE, Flag.MULTILINE};
            var21 = 0;

            for(int var22 = 0; var22 < var20.length; ++var22) {
               Flag var23 = var20[var22];
               var21 |= var23.getValue();
            }

            if (!java.util.regex.Pattern.compile("\\d{1,4}", var21).matcher(var11).matches()) {
               throw new IllegalArgumentException("someFourDigits must match \"\\d{1,4}\"");
            }
         }

         if (var12 != null && var12.length() != 0) {
            String var30 = var12.toString();
            var21 = var30.lastIndexOf(64);
            if (var21 < 0) {
               throw new IllegalArgumentException("anyMailAddress must be a well-formed email address");
            }

            String var31 = var30.substring(0, var21);
            if (var31.length() > 64 || !java.util.regex.Pattern.compile("(?:[a-z0-9!#$%&'*+/=?^_`{|}~\u0080-\uffff-]+|\"(?:[a-z0-9!#$%&'*.(),<>\\[\\]:;  @+/=?^_`{|}~\u0080-\uffff-]|\\\\\\\\|\\\\\\\")+\")(?:\\.(?:[a-z0-9!#$%&'*+/=?^_`{|}~\u0080-\uffff-]+|\"(?:[a-z0-9!#$%&'*.(),<>\\[\\]:;  @+/=?^_`{|}~\u0080-\uffff-]|\\\\\\\\|\\\\\\\")+\"))*", 2).matcher(var31).matches()) {
               throw new IllegalArgumentException("anyMailAddress must be a well-formed email address");
            }

            String var32 = var30.substring(var21 + 1);
            boolean var24 = false;

            try {
               var24 = !var32.endsWith(".") && IDN.toASCII(var32).length() <= 255 && java.util.regex.Pattern.compile("(?:[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]-*)*[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]++(?:\\.(?:[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]-*)*[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]++)*|\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]|\\[IPv6:(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(:0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\]", 2).matcher(var32).matches();
            } catch (IllegalArgumentException var29) {
               ;
            }

            if (!var24) {
               throw new IllegalArgumentException("anyMailAddress must be a well-formed email address");
            }

            Flag[] var25 = new Flag[0];
            int var26 = 0;

            for(int var27 = 0; var27 < var25.length; ++var27) {
               Flag var28 = var25[var27];
               var26 |= var28.getValue();
            }

            if (!java.util.regex.Pattern.compile(".*", var26).matcher(var12).matches()) {
               throw new IllegalArgumentException("anyMailAddress must be a well-formed email address");
            }
         }

         if (!var13) {
            throw new IllegalArgumentException("someTrueValue must be true");
         } else if (var14) {
            throw new IllegalArgumentException("someFalseValue must be false");
         } else if (var15 != null && !var15.booleanValue()) {
            throw new IllegalArgumentException("someTrueValueWrapper must be true");
         } else if (var16 != null && var16.booleanValue()) {
            throw new IllegalArgumentException("someFalseValueWrapper must be false");
         } else if ((long)var17 < 42L) {
            throw new IllegalArgumentException("someIntPrimitiveValueThatIsMinimal42 must be greater than or equal to 42");
         } else if (var18 != null && var18.longValue() < 42L) {
            throw new IllegalArgumentException("someLongWrapperValueThatIsMinimal42 must be greater than or equal to 42");
         } else if (var19 == null) {
            throw new NullPointerException("someShortWrapperValueThatIsNotNullAndAbout42 must not be null");
         } else if (var19 != null && (long)var19.shortValue() < 41L) {
            throw new IllegalArgumentException("someShortWrapperValueThatIsNotNullAndAbout42 must be greater than or equal to 41");
         } else if (var19 != null && (long)var19.shortValue() > 43L) {
            throw new IllegalArgumentException("someShortWrapperValueThatIsNotNullAndAbout42 must be less than or equal to 43");
         }
      } else {
         throw new IllegalArgumentException("size of stringOfLenfthBetween10And20 must be between 10 and 20");
      }
   }
}
