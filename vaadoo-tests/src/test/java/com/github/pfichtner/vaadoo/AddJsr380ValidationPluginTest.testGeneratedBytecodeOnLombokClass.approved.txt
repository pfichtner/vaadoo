package com.example;

import com.example.SomeLombokClass.SomeLombokClassBuilder;
import com.google.common.base.Preconditions;
import jakarta.validation.constraints.AssertFalse;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Null;
import java.util.Collection;
import java.util.Map;
import lombok.Generated;

public class SomeLombokClass {
   @Null
   private final Object someNullObject;
   @NotNull
   private final Object someObject;
   private final String valueWithoutAnnotation;
   @NotEmpty
   private final CharSequence someNotEmptyCharSequence;
   @NotEmpty
   private final String someNotEmptyString;
   @NotEmpty
   private final Collection someNotEmptyCollection;
   @NotEmpty
   private final Map someNotEmptyMap;
   @NotEmpty
   private final Integer[] someNotEmptyArray;
   @NotBlank
   private final CharSequence someNonBlankValue;
   @NotBlank(
      message = "my custom message"
   )
   private final String someNonBlankValueWithCustomMessage;
   @AssertTrue
   private final boolean someTrueValue;
   @AssertFalse
   private final boolean someFalseValue;
   @AssertTrue
   private final Boolean someTrueValueWrapper;
   @AssertFalse
   private final Boolean someFalseValueWrapper;
   @Min(42L)
   private final int someIntPrimitiveValueThatIsMinimal42;
   @Min(42L)
   private final Long someLongWrapperValueThatIsMinimal42;
   @NotNull
   @Min(42L)
   @Max(42L)
   private final Short someShortWrapperValueThatIsNotNullAndMinimal42;

   public static void main(String[] args) {
      System.out.println(builder().someObject("isNotNull").someNonBlankValue("").build());
   }

   @Generated
   SomeLombokClass(@Null Object someNullObject, @NotNull Object someObject, String valueWithoutAnnotation, @NotEmpty CharSequence someNotEmptyCharSequence, @NotEmpty String someNotEmptyString, @NotEmpty Collection someNotEmptyCollection, @NotEmpty Map someNotEmptyMap, Integer[] someNotEmptyArray, @NotBlank CharSequence someNonBlankValue, @NotBlank(message = "my custom message") String someNonBlankValueWithCustomMessage, @AssertTrue boolean someTrueValue, @AssertFalse boolean someFalseValue, @AssertTrue Boolean someTrueValueWrapper, @AssertFalse Boolean someFalseValueWrapper, @Min(42L) int someIntPrimitiveValueThatIsMinimal42, @Min(42L) Long someLongWrapperValueThatIsMinimal42, @NotNull @Min(42L) Short someShortWrapperValueThatIsNotNullAndMinimal42) {
      validate(someNullObject, someObject, valueWithoutAnnotation, someNotEmptyCharSequence, someNotEmptyString, someNotEmptyCollection, someNotEmptyMap, someNotEmptyArray, someNonBlankValue, someNonBlankValueWithCustomMessage, someTrueValue, someFalseValue, someTrueValueWrapper, someFalseValueWrapper, someIntPrimitiveValueThatIsMinimal42, someLongWrapperValueThatIsMinimal42, someShortWrapperValueThatIsNotNullAndMinimal42);
      this.someNullObject = someNullObject;
      this.someObject = someObject;
      this.valueWithoutAnnotation = valueWithoutAnnotation;
      this.someNotEmptyCharSequence = someNotEmptyCharSequence;
      this.someNotEmptyString = someNotEmptyString;
      this.someNotEmptyCollection = someNotEmptyCollection;
      this.someNotEmptyMap = someNotEmptyMap;
      this.someNotEmptyArray = someNotEmptyArray;
      this.someNonBlankValue = someNonBlankValue;
      this.someNonBlankValueWithCustomMessage = someNonBlankValueWithCustomMessage;
      this.someTrueValue = someTrueValue;
      this.someFalseValue = someFalseValue;
      this.someTrueValueWrapper = someTrueValueWrapper;
      this.someFalseValueWrapper = someFalseValueWrapper;
      this.someIntPrimitiveValueThatIsMinimal42 = someIntPrimitiveValueThatIsMinimal42;
      this.someLongWrapperValueThatIsMinimal42 = someLongWrapperValueThatIsMinimal42;
      this.someShortWrapperValueThatIsNotNullAndMinimal42 = someShortWrapperValueThatIsNotNullAndMinimal42;
   }

   @Generated
   public static SomeLombokClassBuilder builder() {
      return new SomeLombokClassBuilder();
   }

   private static void validate(Object var0, Object var1, String var2, CharSequence var3, String var4, Collection var5, Map var6, Integer[] var7, CharSequence var8, String var9, boolean var10, boolean var11, Boolean var12, Boolean var13, int var14, Long var15, Short var16) {
      Preconditions.checkArgument(var0 == null, "someNullObject must be null");
      Preconditions.checkNotNull(var1, "someObject must not be null");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var3, "someNotEmptyCharSequence must not be empty")).length() > 0, "someNotEmptyCharSequence must not be empty");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var4, "someNotEmptyString must not be empty")).length() > 0, "someNotEmptyString must not be empty");
      Preconditions.checkArgument(((Collection)Preconditions.checkNotNull(var5, "someNotEmptyCollection must not be empty")).size() > 0, "someNotEmptyCollection must not be empty");
      Preconditions.checkArgument(((Map)Preconditions.checkNotNull(var6, "someNotEmptyMap must not be empty")).size() > 0, "someNotEmptyMap must not be empty");
      Preconditions.checkArgument(((Object[])Preconditions.checkNotNull(var7, "someNotEmptyArray must not be empty")).length > 0, "someNotEmptyArray must not be empty");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var8, "someNonBlankValue must not be blank")).toString().trim().length() > 0, "someNonBlankValue must not be blank");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var9, "my custom message")).toString().trim().length() > 0, "my custom message");
      Preconditions.checkArgument(var10, "someTrueValue must be true");
      Preconditions.checkArgument(!var11, "someFalseValue must be false");
      Preconditions.checkArgument(var12 == null || var12.booleanValue(), "someTrueValueWrapper must be true");
      Preconditions.checkArgument(var13 == null || !var13.booleanValue(), "someFalseValueWrapper must be false");
      Preconditions.checkArgument((long)var14 >= 42L, "someIntPrimitiveValueThatIsMinimal42 must be greater than or equal to 42");
      Preconditions.checkArgument(var15 == null || var15.longValue() >= 42L, "someLongWrapperValueThatIsMinimal42 must be greater than or equal to 42");
      Preconditions.checkNotNull(var16, "someShortWrapperValueThatIsNotNullAndMinimal42 must not be null");
      Preconditions.checkArgument(var16 == null || (long)var16.shortValue() >= 42L, "someShortWrapperValueThatIsNotNullAndMinimal42 must be greater than or equal to 42");
   }
}
