package com.example;

import com.example.SomeLombokClass.SomeLombokClassBuilder;
import com.google.common.base.Preconditions;
import jakarta.validation.constraints.AssertFalse;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Null;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Pattern.Flag;
import java.net.IDN;
import java.util.Collection;
import java.util.Map;
import lombok.Generated;

public class SomeLombokClass {
   @Null
   private final Object someNullObject;
   @NotNull
   private final Object someObject;
   private final String valueWithoutAnnotation;
   @NotEmpty
   private final CharSequence someNotEmptyCharSequence;
   @NotEmpty
   private final String someNotEmptyString;
   @NotEmpty
   private final Collection someNotEmptyCollection;
   @NotEmpty
   private final Map someNotEmptyMap;
   @NotEmpty
   private final Integer[] someNotEmptyArray;
   @NotBlank
   private final CharSequence someNonBlankValue;
   @NotBlank(
      message = "my custom message"
   )
   private final String someNonBlankValueWithCustomMessage;
   @Pattern(
      regexp = "\\d{1,4}",
      flags = {Flag.CASE_INSENSITIVE, Flag.MULTILINE}
   )
   private final String someFourDigits;
   @Email
   private final String anyMailAddress;
   @AssertTrue
   private final boolean someTrueValue;
   @AssertFalse
   private final boolean someFalseValue;
   @AssertTrue
   private final Boolean someTrueValueWrapper;
   @AssertFalse
   private final Boolean someFalseValueWrapper;
   @Min(42L)
   private final int someIntPrimitiveValueThatIsMinimal42;
   @Min(42L)
   private final Long someLongWrapperValueThatIsMinimal42;
   @NotNull
   @Min(41L)
   @Max(43L)
   private final Short someShortWrapperValueThatIsNotNullAndAbout42;

   public static void main(String[] args) {
      System.out.println(builder().someObject("isNotNull").someNonBlankValue("").build());
   }

   @Generated
   SomeLombokClass(@Null Object someNullObject, @NotNull Object someObject, String valueWithoutAnnotation, @NotEmpty CharSequence someNotEmptyCharSequence, @NotEmpty String someNotEmptyString, @NotEmpty Collection someNotEmptyCollection, @NotEmpty Map someNotEmptyMap, Integer[] someNotEmptyArray, @NotBlank CharSequence someNonBlankValue, @NotBlank(message = "my custom message") String someNonBlankValueWithCustomMessage, @Pattern(regexp = "\\d{1,4}",flags = {Flag.CASE_INSENSITIVE, Flag.MULTILINE}) String someFourDigits, @Email String anyMailAddress, @AssertTrue boolean someTrueValue, @AssertFalse boolean someFalseValue, @AssertTrue Boolean someTrueValueWrapper, @AssertFalse Boolean someFalseValueWrapper, @Min(42L) int someIntPrimitiveValueThatIsMinimal42, @Min(42L) Long someLongWrapperValueThatIsMinimal42, @NotNull @Min(41L) @Max(43L) Short someShortWrapperValueThatIsNotNullAndAbout42) {
      validate(someNullObject, someObject, valueWithoutAnnotation, someNotEmptyCharSequence, someNotEmptyString, someNotEmptyCollection, someNotEmptyMap, someNotEmptyArray, someNonBlankValue, someNonBlankValueWithCustomMessage, someFourDigits, anyMailAddress, someTrueValue, someFalseValue, someTrueValueWrapper, someFalseValueWrapper, someIntPrimitiveValueThatIsMinimal42, someLongWrapperValueThatIsMinimal42, someShortWrapperValueThatIsNotNullAndAbout42);
      this.someNullObject = someNullObject;
      this.someObject = someObject;
      this.valueWithoutAnnotation = valueWithoutAnnotation;
      this.someNotEmptyCharSequence = someNotEmptyCharSequence;
      this.someNotEmptyString = someNotEmptyString;
      this.someNotEmptyCollection = someNotEmptyCollection;
      this.someNotEmptyMap = someNotEmptyMap;
      this.someNotEmptyArray = someNotEmptyArray;
      this.someNonBlankValue = someNonBlankValue;
      this.someNonBlankValueWithCustomMessage = someNonBlankValueWithCustomMessage;
      this.someFourDigits = someFourDigits;
      this.anyMailAddress = anyMailAddress;
      this.someTrueValue = someTrueValue;
      this.someFalseValue = someFalseValue;
      this.someTrueValueWrapper = someTrueValueWrapper;
      this.someFalseValueWrapper = someFalseValueWrapper;
      this.someIntPrimitiveValueThatIsMinimal42 = someIntPrimitiveValueThatIsMinimal42;
      this.someLongWrapperValueThatIsMinimal42 = someLongWrapperValueThatIsMinimal42;
      this.someShortWrapperValueThatIsNotNullAndAbout42 = someShortWrapperValueThatIsNotNullAndAbout42;
   }

   @Generated
   public static SomeLombokClassBuilder builder() {
      return new SomeLombokClassBuilder();
   }

   private static void validate(Object var0, Object var1, String var2, CharSequence var3, String var4, Collection var5, Map var6, Integer[] var7, CharSequence var8, String var9, String var10, String var11, boolean var12, boolean var13, Boolean var14, Boolean var15, int var16, Long var17, Short var18) {
      Preconditions.checkArgument(var0 == null, "someNullObject must be null");
      Preconditions.checkNotNull(var1, "someObject must not be null");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var3, "someNotEmptyCharSequence must not be empty")).length() > 0, "someNotEmptyCharSequence must not be empty");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var4, "someNotEmptyString must not be empty")).length() > 0, "someNotEmptyString must not be empty");
      Preconditions.checkArgument(((Collection)Preconditions.checkNotNull(var5, "someNotEmptyCollection must not be empty")).size() > 0, "someNotEmptyCollection must not be empty");
      Preconditions.checkArgument(((Map)Preconditions.checkNotNull(var6, "someNotEmptyMap must not be empty")).size() > 0, "someNotEmptyMap must not be empty");
      Preconditions.checkArgument(((Object[])Preconditions.checkNotNull(var7, "someNotEmptyArray must not be empty")).length > 0, "someNotEmptyArray must not be empty");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var8, "someNonBlankValue must not be blank")).toString().trim().length() > 0, "someNonBlankValue must not be blank");
      Preconditions.checkArgument(((CharSequence)Preconditions.checkNotNull(var9, "my custom message")).toString().trim().length() > 0, "my custom message");
      if (var10 != null) {
         int var19 = 0;
         Flag[] var20 = new Flag[]{Flag.CASE_INSENSITIVE, Flag.MULTILINE};
         int var21 = var20.length;

         for(int var22 = 0; var22 < var21; ++var22) {
            Flag var23 = var20[var22];
            var19 |= var23.getValue();
         }

         Preconditions.checkArgument(java.util.regex.Pattern.compile("\\d{1,4}", var19).matcher(var10).matches(), "someFourDigits must match \"\\d{1,4}\"");
      }

      if (var11 != null && var11.length() != 0) {
         String var31 = var11.toString();
         int var32 = var31.lastIndexOf(64);
         Preconditions.checkArgument(var32 >= 0, "anyMailAddress must be a well-formed email address");
         String var33 = var31.substring(0, var32);
         Preconditions.checkArgument(var33.length() <= 64 && java.util.regex.Pattern.compile("(?:[a-z0-9!#$%&'*+/=?^_`{|}~\u0080-\uffff-]+|\"(?:[a-z0-9!#$%&'*.(),<>\\[\\]:;  @+/=?^_`{|}~\u0080-\uffff-]|\\\\\\\\|\\\\\\\")+\")(?:\\.(?:[a-z0-9!#$%&'*+/=?^_`{|}~\u0080-\uffff-]+|\"(?:[a-z0-9!#$%&'*.(),<>\\[\\]:;  @+/=?^_`{|}~\u0080-\uffff-]|\\\\\\\\|\\\\\\\")+\"))*", 2).matcher(var33).matches(), "anyMailAddress must be a well-formed email address");
         String var34 = var31.substring(var32 + 1);
         boolean var35 = false;

         try {
            var35 = !var34.endsWith(".") && IDN.toASCII(var34).length() <= 255 && java.util.regex.Pattern.compile("(?:[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]-*)*[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]++(?:\\.(?:[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]-*)*[a-z\u0080-\uffff0-9!#$%&'*+/=?^_`{|}~]++)*|\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\]|\\[IPv6:(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(:0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\]", 2).matcher(var34).matches();
         } catch (IllegalArgumentException var30) {
            ;
         }

         Preconditions.checkArgument(var35, "anyMailAddress must be a well-formed email address");
         String var24 = ".*";
         int var25 = 0;
         Flag[] var26 = new Flag[0];
         int var27 = var26.length;

         for(int var28 = 0; var28 < var27; ++var28) {
            Flag var29 = var26[var28];
            var25 |= var29.getValue();
         }

         Preconditions.checkArgument(java.util.regex.Pattern.compile(var24, var25).matcher(var11).matches(), "anyMailAddress must be a well-formed email address");
      }

      Preconditions.checkArgument(var12, "someTrueValue must be true");
      Preconditions.checkArgument(!var13, "someFalseValue must be false");
      Preconditions.checkArgument(var14 == null || var14.booleanValue(), "someTrueValueWrapper must be true");
      Preconditions.checkArgument(var15 == null || !var15.booleanValue(), "someFalseValueWrapper must be false");
      Preconditions.checkArgument((long)var16 >= 42L, "someIntPrimitiveValueThatIsMinimal42 must be greater than or equal to 42");
      Preconditions.checkArgument(var17 == null || var17.longValue() >= 42L, "someLongWrapperValueThatIsMinimal42 must be greater than or equal to 42");
      Preconditions.checkNotNull(var18, "someShortWrapperValueThatIsNotNullAndAbout42 must not be null");
      Preconditions.checkArgument(var18 == null || (long)var18.shortValue() >= 41L, "someShortWrapperValueThatIsNotNullAndAbout42 must be greater than or equal to 41");
      Preconditions.checkArgument(var18 == null || (long)var18.shortValue() <= 43L, "someShortWrapperValueThatIsNotNullAndAbout42 must be less than or equal to 43");
   }
}
