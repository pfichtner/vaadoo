package com.example;

import com.example.SomeLombokClass.SomeLombokClassBuilder;
import com.google.common.base.CharMatcher;
import com.google.common.base.Preconditions;
import jakarta.validation.constraints.AssertFalse;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Null;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import lombok.Generated;

public final class SomeLombokClass {
   @Null
   private final Object someNullObject;
   @NotNull
   private final Object someObject;
   private final String valueWithoutAnnotation;
   @NotEmpty
   private final CharSequence someNotEmptyCharSequence;
   @NotEmpty
   private final String someNotEmptyString;
   @NotEmpty
   private final Collection someNotEmptyCollection;
   @NotEmpty
   private final Map someNotEmptyMap;
   @NotEmpty
   private final Integer[] someNotEmptyArray;
   @NotBlank
   private final CharSequence someNonBlankValue;
   @AssertTrue
   private final boolean someTrueValue;
   @AssertFalse
   private final boolean someFalseValue;
   @AssertTrue
   private final Boolean someTrueValueWrapper;
   @AssertFalse
   private final Boolean someFalseValueWrapper;
   @Min(42L)
   private final int someIntPrimitiveValueThatIsMinimal42;
   @Min(42L)
   private final Long someLongWrapperValueThatIsMinimal42;
   @NotNull
   @Min(42L)
   private final Short someShortWrapperValueThatIsNotNullAndMinimal42;

   public static void main(String[] args) {
      System.out.println(builder().someObject("isNotNull").someNonBlankValue("").build());
   }

   @Generated
   SomeLombokClass(@Null Object someNullObject, @NotNull Object someObject, String valueWithoutAnnotation, @NotEmpty CharSequence someNotEmptyCharSequence, @NotEmpty String someNotEmptyString, @NotEmpty Collection someNotEmptyCollection, @NotEmpty Map someNotEmptyMap, Integer[] someNotEmptyArray, @NotBlank CharSequence someNonBlankValue, @AssertTrue boolean someTrueValue, @AssertFalse boolean someFalseValue, @AssertTrue Boolean someTrueValueWrapper, @AssertFalse Boolean someFalseValueWrapper, @Min(42L) int someIntPrimitiveValueThatIsMinimal42, @Min(42L) Long someLongWrapperValueThatIsMinimal42, @NotNull @Min(42L) Short someShortWrapperValueThatIsNotNullAndMinimal42) {
      validate(someNullObject, someObject, valueWithoutAnnotation, someNotEmptyCharSequence, someNotEmptyString, someNotEmptyCollection, someNotEmptyMap, someNotEmptyArray, someNonBlankValue, someTrueValue, someFalseValue, someTrueValueWrapper, someFalseValueWrapper, someIntPrimitiveValueThatIsMinimal42, someLongWrapperValueThatIsMinimal42, someShortWrapperValueThatIsNotNullAndMinimal42);
      this.someNullObject = someNullObject;
      this.someObject = someObject;
      this.valueWithoutAnnotation = valueWithoutAnnotation;
      this.someNotEmptyCharSequence = someNotEmptyCharSequence;
      this.someNotEmptyString = someNotEmptyString;
      this.someNotEmptyCollection = someNotEmptyCollection;
      this.someNotEmptyMap = someNotEmptyMap;
      this.someNotEmptyArray = someNotEmptyArray;
      this.someNonBlankValue = someNonBlankValue;
      this.someTrueValue = someTrueValue;
      this.someFalseValue = someFalseValue;
      this.someTrueValueWrapper = someTrueValueWrapper;
      this.someFalseValueWrapper = someFalseValueWrapper;
      this.someIntPrimitiveValueThatIsMinimal42 = someIntPrimitiveValueThatIsMinimal42;
      this.someLongWrapperValueThatIsMinimal42 = someLongWrapperValueThatIsMinimal42;
      this.someShortWrapperValueThatIsNotNullAndMinimal42 = someShortWrapperValueThatIsNotNullAndMinimal42;
   }

   @Generated
   public static SomeLombokClassBuilder builder() {
      return new SomeLombokClassBuilder();
   }

   @Null
   @Generated
   public Object getSomeNullObject() {
      return this.someNullObject;
   }

   @NotNull
   @Generated
   public Object getSomeObject() {
      return this.someObject;
   }

   @Generated
   public String getValueWithoutAnnotation() {
      return this.valueWithoutAnnotation;
   }

   @NotEmpty
   @Generated
   public CharSequence getSomeNotEmptyCharSequence() {
      return this.someNotEmptyCharSequence;
   }

   @NotEmpty
   @Generated
   public String getSomeNotEmptyString() {
      return this.someNotEmptyString;
   }

   @NotEmpty
   @Generated
   public Collection getSomeNotEmptyCollection() {
      return this.someNotEmptyCollection;
   }

   @NotEmpty
   @Generated
   public Map getSomeNotEmptyMap() {
      return this.someNotEmptyMap;
   }

   @NotEmpty
   @Generated
   public Integer[] getSomeNotEmptyArray() {
      return this.someNotEmptyArray;
   }

   @NotBlank
   @Generated
   public CharSequence getSomeNonBlankValue() {
      return this.someNonBlankValue;
   }

   @AssertTrue
   @Generated
   public boolean isSomeTrueValue() {
      return this.someTrueValue;
   }

   @AssertFalse
   @Generated
   public boolean isSomeFalseValue() {
      return this.someFalseValue;
   }

   @AssertTrue
   @Generated
   public Boolean getSomeTrueValueWrapper() {
      return this.someTrueValueWrapper;
   }

   @AssertFalse
   @Generated
   public Boolean getSomeFalseValueWrapper() {
      return this.someFalseValueWrapper;
   }

   @Min(42L)
   @Generated
   public int getSomeIntPrimitiveValueThatIsMinimal42() {
      return this.someIntPrimitiveValueThatIsMinimal42;
   }

   @Min(42L)
   @Generated
   public Long getSomeLongWrapperValueThatIsMinimal42() {
      return this.someLongWrapperValueThatIsMinimal42;
   }

   @NotNull
   @Min(42L)
   @Generated
   public Short getSomeShortWrapperValueThatIsNotNullAndMinimal42() {
      return this.someShortWrapperValueThatIsNotNullAndMinimal42;
   }

   @Generated
   public boolean equals(Object o) {
      if (o == this) {
         return true;
      } else if (!(o instanceof SomeLombokClass)) {
         return false;
      } else {
         SomeLombokClass other = (SomeLombokClass)o;
         if (this.isSomeTrueValue() != other.isSomeTrueValue()) {
            return false;
         } else if (this.isSomeFalseValue() != other.isSomeFalseValue()) {
            return false;
         } else if (this.getSomeIntPrimitiveValueThatIsMinimal42() != other.getSomeIntPrimitiveValueThatIsMinimal42()) {
            return false;
         } else {
            label164: {
               Object this$someTrueValueWrapper = this.getSomeTrueValueWrapper();
               Object other$someTrueValueWrapper = other.getSomeTrueValueWrapper();
               if (this$someTrueValueWrapper == null) {
                  if (other$someTrueValueWrapper == null) {
                     break label164;
                  }
               } else if (this$someTrueValueWrapper.equals(other$someTrueValueWrapper)) {
                  break label164;
               }

               return false;
            }

            Object this$someFalseValueWrapper = this.getSomeFalseValueWrapper();
            Object other$someFalseValueWrapper = other.getSomeFalseValueWrapper();
            if (this$someFalseValueWrapper == null) {
               if (other$someFalseValueWrapper != null) {
                  return false;
               }
            } else if (!this$someFalseValueWrapper.equals(other$someFalseValueWrapper)) {
               return false;
            }

            label150: {
               Object this$someLongWrapperValueThatIsMinimal42 = this.getSomeLongWrapperValueThatIsMinimal42();
               Object other$someLongWrapperValueThatIsMinimal42 = other.getSomeLongWrapperValueThatIsMinimal42();
               if (this$someLongWrapperValueThatIsMinimal42 == null) {
                  if (other$someLongWrapperValueThatIsMinimal42 == null) {
                     break label150;
                  }
               } else if (this$someLongWrapperValueThatIsMinimal42.equals(other$someLongWrapperValueThatIsMinimal42)) {
                  break label150;
               }

               return false;
            }

            label143: {
               Object this$someShortWrapperValueThatIsNotNullAndMinimal42 = this.getSomeShortWrapperValueThatIsNotNullAndMinimal42();
               Object other$someShortWrapperValueThatIsNotNullAndMinimal42 = other.getSomeShortWrapperValueThatIsNotNullAndMinimal42();
               if (this$someShortWrapperValueThatIsNotNullAndMinimal42 == null) {
                  if (other$someShortWrapperValueThatIsNotNullAndMinimal42 == null) {
                     break label143;
                  }
               } else if (this$someShortWrapperValueThatIsNotNullAndMinimal42.equals(other$someShortWrapperValueThatIsNotNullAndMinimal42)) {
                  break label143;
               }

               return false;
            }

            label136: {
               Object this$someNullObject = this.getSomeNullObject();
               Object other$someNullObject = other.getSomeNullObject();
               if (this$someNullObject == null) {
                  if (other$someNullObject == null) {
                     break label136;
                  }
               } else if (this$someNullObject.equals(other$someNullObject)) {
                  break label136;
               }

               return false;
            }

            Object this$someObject = this.getSomeObject();
            Object other$someObject = other.getSomeObject();
            if (this$someObject == null) {
               if (other$someObject != null) {
                  return false;
               }
            } else if (!this$someObject.equals(other$someObject)) {
               return false;
            }

            label122: {
               Object this$valueWithoutAnnotation = this.getValueWithoutAnnotation();
               Object other$valueWithoutAnnotation = other.getValueWithoutAnnotation();
               if (this$valueWithoutAnnotation == null) {
                  if (other$valueWithoutAnnotation == null) {
                     break label122;
                  }
               } else if (this$valueWithoutAnnotation.equals(other$valueWithoutAnnotation)) {
                  break label122;
               }

               return false;
            }

            Object this$someNotEmptyCharSequence = this.getSomeNotEmptyCharSequence();
            Object other$someNotEmptyCharSequence = other.getSomeNotEmptyCharSequence();
            if (this$someNotEmptyCharSequence == null) {
               if (other$someNotEmptyCharSequence != null) {
                  return false;
               }
            } else if (!this$someNotEmptyCharSequence.equals(other$someNotEmptyCharSequence)) {
               return false;
            }

            label108: {
               Object this$someNotEmptyString = this.getSomeNotEmptyString();
               Object other$someNotEmptyString = other.getSomeNotEmptyString();
               if (this$someNotEmptyString == null) {
                  if (other$someNotEmptyString == null) {
                     break label108;
                  }
               } else if (this$someNotEmptyString.equals(other$someNotEmptyString)) {
                  break label108;
               }

               return false;
            }

            Object this$someNotEmptyCollection = this.getSomeNotEmptyCollection();
            Object other$someNotEmptyCollection = other.getSomeNotEmptyCollection();
            if (this$someNotEmptyCollection == null) {
               if (other$someNotEmptyCollection != null) {
                  return false;
               }
            } else if (!this$someNotEmptyCollection.equals(other$someNotEmptyCollection)) {
               return false;
            }

            Object this$someNotEmptyMap = this.getSomeNotEmptyMap();
            Object other$someNotEmptyMap = other.getSomeNotEmptyMap();
            if (this$someNotEmptyMap == null) {
               if (other$someNotEmptyMap != null) {
                  return false;
               }
            } else if (!this$someNotEmptyMap.equals(other$someNotEmptyMap)) {
               return false;
            }

            if (!Arrays.deepEquals(this.getSomeNotEmptyArray(), other.getSomeNotEmptyArray())) {
               return false;
            } else {
               Object this$someNonBlankValue = this.getSomeNonBlankValue();
               Object other$someNonBlankValue = other.getSomeNonBlankValue();
               if (this$someNonBlankValue == null) {
                  if (other$someNonBlankValue != null) {
                     return false;
                  }
               } else if (!this$someNonBlankValue.equals(other$someNonBlankValue)) {
                  return false;
               }

               return true;
            }
         }
      }
   }

   @Generated
   public int hashCode() {
      int PRIME = true;
      int result = 1;
      int result = result * 59 + (this.isSomeTrueValue() ? 79 : 97);
      result = result * 59 + (this.isSomeFalseValue() ? 79 : 97);
      result = result * 59 + this.getSomeIntPrimitiveValueThatIsMinimal42();
      Object $someTrueValueWrapper = this.getSomeTrueValueWrapper();
      result = result * 59 + ($someTrueValueWrapper == null ? 43 : $someTrueValueWrapper.hashCode());
      Object $someFalseValueWrapper = this.getSomeFalseValueWrapper();
      result = result * 59 + ($someFalseValueWrapper == null ? 43 : $someFalseValueWrapper.hashCode());
      Object $someLongWrapperValueThatIsMinimal42 = this.getSomeLongWrapperValueThatIsMinimal42();
      result = result * 59 + ($someLongWrapperValueThatIsMinimal42 == null ? 43 : $someLongWrapperValueThatIsMinimal42.hashCode());
      Object $someShortWrapperValueThatIsNotNullAndMinimal42 = this.getSomeShortWrapperValueThatIsNotNullAndMinimal42();
      result = result * 59 + ($someShortWrapperValueThatIsNotNullAndMinimal42 == null ? 43 : $someShortWrapperValueThatIsNotNullAndMinimal42.hashCode());
      Object $someNullObject = this.getSomeNullObject();
      result = result * 59 + ($someNullObject == null ? 43 : $someNullObject.hashCode());
      Object $someObject = this.getSomeObject();
      result = result * 59 + ($someObject == null ? 43 : $someObject.hashCode());
      Object $valueWithoutAnnotation = this.getValueWithoutAnnotation();
      result = result * 59 + ($valueWithoutAnnotation == null ? 43 : $valueWithoutAnnotation.hashCode());
      Object $someNotEmptyCharSequence = this.getSomeNotEmptyCharSequence();
      result = result * 59 + ($someNotEmptyCharSequence == null ? 43 : $someNotEmptyCharSequence.hashCode());
      Object $someNotEmptyString = this.getSomeNotEmptyString();
      result = result * 59 + ($someNotEmptyString == null ? 43 : $someNotEmptyString.hashCode());
      Object $someNotEmptyCollection = this.getSomeNotEmptyCollection();
      result = result * 59 + ($someNotEmptyCollection == null ? 43 : $someNotEmptyCollection.hashCode());
      Object $someNotEmptyMap = this.getSomeNotEmptyMap();
      result = result * 59 + ($someNotEmptyMap == null ? 43 : $someNotEmptyMap.hashCode());
      result = result * 59 + Arrays.deepHashCode(this.getSomeNotEmptyArray());
      Object $someNonBlankValue = this.getSomeNonBlankValue();
      result = result * 59 + ($someNonBlankValue == null ? 43 : $someNonBlankValue.hashCode());
      return result;
   }

   @Generated
   public String toString() {
      String.valueOf(this.getSomeNullObject());
      String.valueOf(this.getSomeObject());
      this.getValueWithoutAnnotation();
      String.valueOf(this.getSomeNotEmptyCharSequence());
      this.getSomeNotEmptyString();
      String.valueOf(this.getSomeNotEmptyCollection());
      String.valueOf(this.getSomeNotEmptyMap());
      Arrays.deepToString(this.getSomeNotEmptyArray());
      String.valueOf(this.getSomeNonBlankValue());
      this.isSomeTrueValue();
      this.isSomeFalseValue();
      this.getSomeTrueValueWrapper();
      this.getSomeFalseValueWrapper();
      this.getSomeIntPrimitiveValueThatIsMinimal42();
      this.getSomeLongWrapperValueThatIsMinimal42();
      return this.getSomeShortWrapperValueThatIsNotNullAndMinimal42();
   }

   private static void validate(Object var0, Object var1, String var2, CharSequence var3, String var4, Collection var5, Map var6, Integer[] var7, CharSequence var8, boolean var9, boolean var10, Boolean var11, Boolean var12, int var13, Long var14, Short var15) {
      Preconditions.checkArgument(var0 == null, "someNullObject expected to be null");
      Preconditions.checkNotNull(var1, "someObject must not be null");
      Preconditions.checkNotNull(var3, "someNotEmptyCharSequence must not be null");
      Preconditions.checkArgument(var3.length() > 0, "someNotEmptyCharSequence must not be empty");
      Preconditions.checkNotNull(var4, "someNotEmptyString must not be null");
      Preconditions.checkArgument(var4.length() > 0, "someNotEmptyString must not be empty");
      Preconditions.checkNotNull(var5, "someNotEmptyCollection must not be null");
      Preconditions.checkArgument(var5.size() > 0, "someNotEmptyCollection must not be empty");
      Preconditions.checkNotNull(var6, "someNotEmptyMap must not be null");
      Preconditions.checkArgument(var6.size() > 0, "someNotEmptyMap must not be empty");
      Preconditions.checkNotNull(var7, "someNotEmptyArray must not be null");
      Preconditions.checkArgument(var7.length > 0, "someNotEmptyArray must not be empty");
      Preconditions.checkNotNull(var8, "someNonBlankValue must not be null");
      Preconditions.checkArgument(CharMatcher.whitespace().negate().countIn(var8) > 0, "someNonBlankValue must not be blank");
      Preconditions.checkArgument(var9, "someTrueValue should be true");
      Preconditions.checkArgument(!var10, "someFalseValue should be false");
      Preconditions.checkArgument(Boolean.TRUE.equals(var11), "someTrueValueWrapper should be true");
      Preconditions.checkArgument(Boolean.FALSE.equals(var12), "someFalseValueWrapper should be false");
      Preconditions.checkArgument((long)var13 >= 42L, "someIntPrimitiveValueThatIsMinimal42 should be >= 42");
      Preconditions.checkArgument(var14 == null || var14.longValue() >= 42L, "someLongWrapperValueThatIsMinimal42 should be >= 42");
      Preconditions.checkNotNull(var15, "someShortWrapperValueThatIsNotNullAndMinimal42 must not be null");
      Preconditions.checkArgument(var15 == null || var15.longValue() >= 42L, "someShortWrapperValueThatIsNotNullAndMinimal42 should be >= 42");
   }
}
